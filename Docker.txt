Install Docker
-------------------------------------------------
This updates your yum repository
#yum check-update

This installs Docker
#yum -y install docker

This starts docker service on the host
#systemctl start docker

Verify that it’s running:
#systemctl status docker

Using the Docker Command
---------------------------------------------------
#docker info

Working with Docker Images
---------------------------------------------------
Docker containers are run from Docker images. By default, it pulls these images from Docker Hub, a Docker registry managed by Docker, the company behind the Docker project. Anybody can build and host their Docker images on Docker Hub, so most applications and Linux distributions you’ll need to run Docker containers have images that are hosted on Docker Hub.

To check whether you can access and download images from Docker Hub, type:
#docker run hello-world

The output, which should include the following, should indicate that Docker in working correctly
Output
Hello fro.
This message shows that your installation appears to be working correctly.
...

You can search for images available on Docker Hub by using the docker command with the search subcommand. For example, to search for the CentOS image, type:
#docker search centos

The script will crawl Docker Hub and return a listing of all images whose name match the search string. 
#docker pull centos

After an image has been downloaded, you may then run a container using the downloaded image with the run subcommand. If an image has not been downloaded when docker is executed with the run subcommand, the Docker client will first download the image, then run a container using it:
#docker run centos

To see the images that have been downloaded to your computer, type:
#docker images

Running a Docker Container
---------------------------------------------------
The hello-world container you ran in the previous step is an example of a container that runs and exits, after emitting a test message. Containers, however, can be much more useful than that, and they can be interactive. After all, they are similar to virtual machines, only more resource-friendly.

As an example, let’s run a container using the latest image of CentOS. The combination of the -i and -t switches gives you interactive shell access into the container:
#docker run -it centos

Your command prompt should change to reflect the fact that you’re now working inside the container and should take this form:

Output
[root@59839a1b7de2 /]#
Important: Note the container id in the command prompt. In the above example, it is 59839a1b7de2.

Now you may run any command inside the container. For example, let’s install MariaDB server in the running container. No need to prefix any command with , because you’re operating inside the container with root privileges:

#yum install mariadb-server

Committing Changes in a Container to a Docker Image
---------------------------------------------------
When you start up a Docker image, you can create, modify, and delete files just like you can with a virtual machine. The changes that you make will only apply to that container. You can start and stop it, but once you destroy it with the docker rm command, the changes will be lost for good.

This section shows you how to save the state of a container as a new Docker image.
After installing MariaDB server inside the CentOS container, you now have a container running off an image, but the container is different from the image you used to create it.

To save the state of the container as a new image, first exit from it:
#exit

Then commit the changes to a new Docker image instance using the following command. The -m switch is for the commit message that helps you and others know what changes you made, while -a is used to specify the author. The container ID is the one you noted earlier in the tutorial when you started the interactive docker session. Unless you created additional repositories on Docker Hub, the repository is usually your Docker Hub username:

docker commit -m "What did you do to the image" -a "Author Name" container-id repository/new_image_name
For example:
#docker commit -m "added mariadb-server" -a "somename" 59839a1b7de2 root/centos-mariadb

Note: When you commit an image, the new image is saved locally, that is, on your computer.

After that operation has completed, listing the Docker images now on your computer should show the new image, as well as the old one that it was derived from:
#docker images


In the above example, centos-mariadb is the new image, which was derived from the existing CentOS image from Docker Hub. The size difference reflects the changes that were made. And in this example, the change was that MariaDB server was installed. So next time you need to run a container using CentOS with MariaDB server pre-installed, you can just use the new image. Images may also be built from what’s called a Dockerfile.

Listing Docker Containers
--------------------------------------
After using Docker for a while, you’ll have many active (running) and inactive containers on your computer. To view the active ones, use:
#docker ps

To view all containers — active and inactive, pass it the -a switch:
#docker ps -a

To view the latest container you created, pass it the -l switch:
#docker ps -l

Stopping a running or active container is as simple as typing:
#docker stop container-id
The container-id can be found in the output from the docker ps command.